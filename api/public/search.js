window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "app", "modulename": "app", "kind": "module", "doc": "<p>Check the left sidebar for the full documentation.</p>\n"}, {"fullname": "app.crud", "modulename": "app.crud", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.crud.comment", "modulename": "app.crud.comment", "kind": "module", "doc": "<p>CRUD operations on Comment model.</p>\n"}, {"fullname": "app.crud.comment.create_comment", "modulename": "app.crud.comment", "qualname": "create_comment", "kind": "function", "doc": "<p>Create a comment.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">.</span><span class=\"n\">CommentCreate</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.comment.create_current_user_comment", "modulename": "app.crud.comment", "qualname": "create_current_user_comment", "kind": "function", "doc": "<p>Create a comment on a post for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">.</span><span class=\"n\">CommentCreate</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Comment</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.comment.update_comment", "modulename": "app.crud.comment", "qualname": "update_comment", "kind": "function", "doc": "<p>Update a comment.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">comment_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">.</span><span class=\"n\">CommentCreate</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.comment.update_current_user_comment", "modulename": "app.crud.comment", "qualname": "update_current_user_comment", "kind": "function", "doc": "<p>Update a comment for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">comment_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"o\">.</span><span class=\"n\">CommentCreate</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Comment</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.comment.delete_comment", "modulename": "app.crud.comment", "qualname": "delete_comment", "kind": "function", "doc": "<p>Delete a comment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">comment_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.comment.delete_current_user_comment", "modulename": "app.crud.comment", "qualname": "delete_current_user_comment", "kind": "function", "doc": "<p>Delete a comment for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">comment_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post", "modulename": "app.crud.post", "kind": "module", "doc": "<p>CRUD operations for posts.</p>\n"}, {"fullname": "app.crud.post.get_user_feed", "modulename": "app.crud.post", "qualname": "get_user_feed", "kind": "function", "doc": "<p>Get the posts that do not have a keeper yet.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.search_posts", "modulename": "app.crud.post", "qualname": "search_posts", "kind": "function", "doc": "<p>Search posts by description or plant name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">search</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.get_post_comments", "modulename": "app.crud.post", "qualname": "get_post_comments", "kind": "function", "doc": "<p>Get the post's comments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Comment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.create_post", "modulename": "app.crud.post", "qualname": "create_post", "kind": "function", "doc": "<p>Create a post.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">post</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">PostCreate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.create_current_user_post", "modulename": "app.crud.post", "qualname": "create_current_user_post", "kind": "function", "doc": "<p>Create a post for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">post</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">PostCreate</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.update_post", "modulename": "app.crud.post", "qualname": "update_post", "kind": "function", "doc": "<p>Update a post.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">post</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">PostCreate</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.update_current_user_post", "modulename": "app.crud.post", "qualname": "update_current_user_post", "kind": "function", "doc": "<p>Update a post for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">post</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">PostCreate</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.delete_post", "modulename": "app.crud.post", "qualname": "delete_post", "kind": "function", "doc": "<p>Delete a post.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.post.delete_current_user_post", "modulename": "app.crud.post", "qualname": "delete_current_user_post", "kind": "function", "doc": "<p>Delete a post for the current user.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user", "modulename": "app.crud.user", "kind": "module", "doc": "<p>CRUD operations for users.</p>\n"}, {"fullname": "app.crud.user.get_user", "modulename": "app.crud.user", "qualname": "get_user", "kind": "function", "doc": "<p>Get a user by username.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.authenticate_user", "modulename": "app.crud.user", "qualname": "authenticate_user", "kind": "function", "doc": "<p>Authenticate a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.get_current_user", "modulename": "app.crud.user", "qualname": "get_current_user", "kind": "function", "doc": "<p>Get the current user.</p>\n\n<p>Getting the current user via authentication.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "app.crud.user.get_user_by_email", "modulename": "app.crud.user", "qualname": "get_user_by_email", "kind": "function", "doc": "<p>Get a user by email.\nrembmer that the oauth2 <code>username</code> is the user's <code>email</code> in our app.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.get_user_posts", "modulename": "app.crud.user", "qualname": "get_user_posts", "kind": "function", "doc": "<p>Get a user's posts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.get_current_user_posts", "modulename": "app.crud.user", "qualname": "get_current_user_posts", "kind": "function", "doc": "<p>Get the current user's posts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.get_user_comments", "modulename": "app.crud.user", "qualname": "get_user_comments", "kind": "function", "doc": "<p>Get a user's comments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Comment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.get_current_user_comments", "modulename": "app.crud.user", "qualname": "get_current_user_comments", "kind": "function", "doc": "<p>Get the current user's comments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Comment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.create_user", "modulename": "app.crud.user", "qualname": "create_user", "kind": "function", "doc": "<p>Create a new user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">UserCreate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_user_email", "modulename": "app.crud.user", "qualname": "update_user_email", "kind": "function", "doc": "<p>Update a user's email.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_user_password", "modulename": "app.crud.user", "qualname": "update_user_password", "kind": "function", "doc": "<p>Update a user's password.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_user_data", "modulename": "app.crud.user", "qualname": "update_user_data", "kind": "function", "doc": "<p>Update a user's data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">firstname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lastname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_current_user_email", "modulename": "app.crud.user", "qualname": "update_current_user_email", "kind": "function", "doc": "<p>Update the current user's email.</p>\n\n<h1 id=\"todo\">TODO</h1>\n\n<ul>\n<li>Check that the email is not already in use</li>\n<li>Logout the user after updating the email</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">new_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_current_user_password", "modulename": "app.crud.user", "qualname": "update_current_user_password", "kind": "function", "doc": "<p>Update the current user's password.</p>\n\n<h1 id=\"todo\">TODO</h1>\n\n<ul>\n<li>Logout the user after updating the password</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">old_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.update_current_user_data", "modulename": "app.crud.user", "qualname": "update_current_user_data", "kind": "function", "doc": "<p>Update the current user's data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">firstname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lastname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.delete_user", "modulename": "app.crud.user", "qualname": "delete_user", "kind": "function", "doc": "<p>Delete a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.crud.user.delete_current_user", "modulename": "app.crud.user", "qualname": "delete_current_user", "kind": "function", "doc": "<p>Delete the current user.</p>\n\n<h1 id=\"todo\">TODO</h1>\n\n<ul>\n<li>Logout the user after deleting the account</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">OAuth2PasswordBearer</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "app.database", "modulename": "app.database", "kind": "module", "doc": "<p>This module is used to handle database connection to the API.</p>\n"}, {"fullname": "app.database.link", "modulename": "app.database.link", "kind": "module", "doc": "<p>This module is used to connect to the database.</p>\n\n<p>For more details see:\n<a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#install-sqlalchemy\">https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#install-sqlalchemy</a></p>\n"}, {"fullname": "app.database.link.engine", "modulename": "app.database.link", "qualname": "engine", "kind": "variable", "doc": "<p>Database engine used to create a session factory.</p>\n", "default_value": "Engine(mysql+mysqldb://user:***@mysqldb:3306/db)"}, {"fullname": "app.database.link.SessionLocal", "modulename": "app.database.link", "qualname": "SessionLocal", "kind": "variable", "doc": "<p>Session factory used to create a session.</p>\n", "default_value": "sessionmaker(class_=&#x27;Session&#x27;, autocommit=False, bind=Engine(mysql+mysqldb://user:***@mysqldb:3306/db), autoflush=False, expire_on_commit=True)"}, {"fullname": "app.database.link.Base", "modulename": "app.database.link", "qualname": "Base", "kind": "class", "doc": "<p>Base class used to create database models.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.database.link.Base.__init__", "modulename": "app.database.link", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "app.database.util", "modulename": "app.database.util", "kind": "module", "doc": "<p>This module contains functions to connect to the database.</p>\n\n<p>For more details see:\n<a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#install-sqlalchemy\">https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#install-sqlalchemy</a></p>\n"}, {"fullname": "app.database.util.connect", "modulename": "app.database.util", "qualname": "connect", "kind": "function", "doc": "<p>Try to connect to the database.</p>\n\n<p>If the connection fails, wait 5 seconds before trying again.\nTry 10 times.</p>\n\n<p>This is used to tolerate nework problems and database startup.</p>\n\n<h1 id=\"todo\">TODO</h1>\n\n<p>In order to improve this, we should do the following:</p>\n\n<pre><code>- Use an environment variable to configure the number of attempts.\n- Use an environment variable to configure the delay between attempts.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.database.util.get_db", "modulename": "app.database.util", "qualname": "get_db", "kind": "function", "doc": "<p>Create a new session to the database.</p>\n\n<p>The session is used to query the database.\nThe session is closed after the request is finished.\nFor more information see:\n<a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#create-a-dependency\">https://fastapi.tiangolo.com/tutorial/sql-databases/?h=sql#create-a-dependency</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.env", "modulename": "app.env", "kind": "module", "doc": "<p>This module contains the environment variables for the application.</p>\n"}, {"fullname": "app.env.SECRET_KEY", "modulename": "app.env", "qualname": "SECRET_KEY", "kind": "variable", "doc": "<p>Secret key used for authentication and authorization.</p>\n\n<p>This key should be kept secret in production.</p>\n\n<p>To generate a new secret key, run the following command: <code>openssl rand -hex 32</code></p>\n", "default_value": "&#x27;ad938e8363f3f46075853612c802020ec5ce25af7fa4c4131a17b36029c1b1c1&#x27;"}, {"fullname": "app.env.JWT_ENCODING_ALGORITHM", "modulename": "app.env", "qualname": "JWT_ENCODING_ALGORITHM", "kind": "variable", "doc": "<p>Algorithm used to encode JWT tokens.</p>\n\n<p>For a list of supported algorithms see:\n<a href=\"https://pyjwt.readthedocs.io/en/stable/algorithms.html\">https://pyjwt.readthedocs.io/en/stable/algorithms.html</a>.</p>\n", "default_value": "&#x27;HS256&#x27;"}, {"fullname": "app.env.ACCESS_TOKEN_EXPIRE_MINUTES", "modulename": "app.env", "qualname": "ACCESS_TOKEN_EXPIRE_MINUTES", "kind": "variable", "doc": "<p>Expiration time of access tokens in minutes.</p>\n", "default_value": "30"}, {"fullname": "app.env.SQLALCHEMY_DATABASE_URL", "modulename": "app.env", "qualname": "SQLALCHEMY_DATABASE_URL", "kind": "variable", "doc": "<p>URL used to connect to the database.</p>\n\n<p>The URL is in the form <code>dialect+driver://username:password@host:port/database</code>.\nFor more information see:\n<a href=\"https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls\">https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls</a>.</p>\n\n<p>The URL is passed to SQLAlchemy to create the database engine.\nThe database engine is used to create a session factory.\nThe session factory is used to create a session.\nThe session is used to query the database.</p>\n", "default_value": "&#x27;mysql+mysqldb://user:password@mysqldb:3306/db&#x27;"}, {"fullname": "app.env.ORIGINS", "modulename": "app.env", "qualname": "ORIGINS", "kind": "variable", "doc": "<p>Allow CORS origin requests for frontend apps.</p>\n\n<p>This is a security measure to prevent cross-site scripting attacks.\nThe frontend app will run on port 4200 during development.\nSee <a href=\"https://fastapi.tiangolo.com/tutorial/cors/\">https://fastapi.tiangolo.com/tutorial/cors/</a> for more information.</p>\n\n<h2 id=\"note\">NOTE</h2>\n\n<p>In order to improve security, we should do the following:</p>\n\n<pre><code>- Change the origins to the frontend app's URL in production.\n</code></pre>\n", "default_value": "[&#x27;http://localhost:4200&#x27;, &#x27;https://localhost:4200&#x27;]"}, {"fullname": "app.exception", "modulename": "app.exception", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.exception.CREDENTIALS_EXCEPTION", "modulename": "app.exception", "qualname": "CREDENTIALS_EXCEPTION", "kind": "variable", "doc": "<p>Raise this exception when the user credentials are invalid.</p>\n", "default_value": "HTTPException(status_code=401, detail=&#x27;Could not validate credentials&#x27;)"}, {"fullname": "app.main", "modulename": "app.main", "kind": "module", "doc": "<p>This is the main module of the application.\nIt contains the FastAPI application instance and the routes.</p>\n"}, {"fullname": "app.models", "modulename": "app.models", "kind": "module", "doc": "<p>This module contains the database models.</p>\n"}, {"fullname": "app.models.User", "modulename": "app.models", "qualname": "User", "kind": "class", "doc": "<p>User model used to represent a User in database.</p>\n\n<p>A user can have multiple posts and comments.\nA post can have only one owner.\nA comment can have only one owner.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.models.User.__init__", "modulename": "app.models", "qualname": "User.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.models.Post", "modulename": "app.models", "qualname": "Post", "kind": "class", "doc": "<p>Post model used to represent a Post in database.</p>\n\n<p>A post can have multiple comments.\nA user can have multiple posts.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.models.Post.__init__", "modulename": "app.models", "qualname": "Post.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.models.Comment", "modulename": "app.models", "qualname": "Comment", "kind": "class", "doc": "<p>Comment model used to represent a Comment in database.</p>\n\n<p>A comment belongs to one and only one post.\nA post can have multiple comments.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "app.models.Comment.__init__", "modulename": "app.models", "qualname": "Comment.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "app.routes", "modulename": "app.routes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.routes.auth", "modulename": "app.routes.auth", "kind": "module", "doc": "<p>Routes for authentication.</p>\n"}, {"fullname": "app.routes.auth.AuthRoutes", "modulename": "app.routes.auth", "qualname": "AuthRoutes", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.routes.auth.AuthRoutes.__init__", "modulename": "app.routes.auth", "qualname": "AuthRoutes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api</span></span>)</span>"}, {"fullname": "app.routes.comment", "modulename": "app.routes.comment", "kind": "module", "doc": "<p>Routes for comment.</p>\n"}, {"fullname": "app.routes.comment.CommentRoutes", "modulename": "app.routes.comment", "qualname": "CommentRoutes", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.routes.comment.CommentRoutes.__init__", "modulename": "app.routes.comment", "qualname": "CommentRoutes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api</span></span>)</span>"}, {"fullname": "app.routes.post", "modulename": "app.routes.post", "kind": "module", "doc": "<p>Routes for post.</p>\n"}, {"fullname": "app.routes.post.PostRoutes", "modulename": "app.routes.post", "qualname": "PostRoutes", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.routes.post.PostRoutes.__init__", "modulename": "app.routes.post", "qualname": "PostRoutes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api</span></span>)</span>"}, {"fullname": "app.routes.user", "modulename": "app.routes.user", "kind": "module", "doc": "<p>Routes for user.</p>\n"}, {"fullname": "app.routes.user.UserRoutes", "modulename": "app.routes.user", "qualname": "UserRoutes", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.routes.user.UserRoutes.__init__", "modulename": "app.routes.user", "qualname": "UserRoutes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api</span></span>)</span>"}, {"fullname": "app.schema", "modulename": "app.schema", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.schema.comment", "modulename": "app.schema.comment", "kind": "module", "doc": "<p>Comment schemas.</p>\n"}, {"fullname": "app.schema.comment.CommentBase", "modulename": "app.schema.comment", "qualname": "CommentBase", "kind": "class", "doc": "<p>Comment base schema, used to validate comment data.\nclass used as a base for other comment schemas.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "app.schema.comment.CommentCreate", "modulename": "app.schema.comment", "qualname": "CommentCreate", "kind": "class", "doc": "<p>Comment create schema.\nUsed to validate comment data at comment creation.</p>\n", "bases": "CommentBase"}, {"fullname": "app.schema.comment.Comment", "modulename": "app.schema.comment", "qualname": "Comment", "kind": "class", "doc": "<p>Comment schema, used to validate comment data.</p>\n", "bases": "CommentBase"}, {"fullname": "app.schema.comment.Comment.Config", "modulename": "app.schema.comment", "qualname": "Comment.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.schema.post", "modulename": "app.schema.post", "kind": "module", "doc": "<p>Post schema, used to validate post data.</p>\n"}, {"fullname": "app.schema.post.PostBase", "modulename": "app.schema.post", "qualname": "PostBase", "kind": "class", "doc": "<p>Post base schema, used to validate post data.\nclass used as a base for other post schemas.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "app.schema.post.PostCreate", "modulename": "app.schema.post", "qualname": "PostCreate", "kind": "class", "doc": "<p>Post create schema, used to validate post data at creation.</p>\n", "bases": "PostBase"}, {"fullname": "app.schema.post.Post", "modulename": "app.schema.post", "qualname": "Post", "kind": "class", "doc": "<p>Post schema, used to validate post data.</p>\n", "bases": "PostBase"}, {"fullname": "app.schema.post.Post.Config", "modulename": "app.schema.post", "qualname": "Post.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.schema.token", "modulename": "app.schema.token", "kind": "module", "doc": "<p>Token schema used to validate incoming tokens.</p>\n"}, {"fullname": "app.schema.token.Token", "modulename": "app.schema.token", "qualname": "Token", "kind": "class", "doc": "<p>Token schema used to validate incoming tokens.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "app.schema.token.TokenData", "modulename": "app.schema.token", "qualname": "TokenData", "kind": "class", "doc": "<p>Token data schema, used to validate incoming tokens data.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "app.schema.user", "modulename": "app.schema.user", "kind": "module", "doc": "<p>User schemas module.</p>\n"}, {"fullname": "app.schema.user.UserBase", "modulename": "app.schema.user", "qualname": "UserBase", "kind": "class", "doc": "<p>User base schema, used to validate user data.\nclass used as a base for other user schemas.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "app.schema.user.UserCreate", "modulename": "app.schema.user", "qualname": "UserCreate", "kind": "class", "doc": "<p>User create schema, used to validate user data at user creation.</p>\n", "bases": "UserBase"}, {"fullname": "app.schema.user.User", "modulename": "app.schema.user", "qualname": "User", "kind": "class", "doc": "<p>User schema, used to validate user data.</p>\n", "bases": "UserBase"}, {"fullname": "app.schema.user.User.Config", "modulename": "app.schema.user", "qualname": "User.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "app.schema.user.UserInDB", "modulename": "app.schema.user", "qualname": "UserInDB", "kind": "class", "doc": "<p>User in database schema, used to validate user data in database.</p>\n", "bases": "User"}, {"fullname": "app.security", "modulename": "app.security", "kind": "module", "doc": "<p>This module contains functions for authentication and authorization.</p>\n"}, {"fullname": "app.security.verify_password", "modulename": "app.security", "qualname": "verify_password", "kind": "function", "doc": "<p>Verify a password against a hash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plain_password</span>, </span><span class=\"param\"><span class=\"n\">hashed_password</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.security.get_password_hash", "modulename": "app.security", "qualname": "get_password_hash", "kind": "function", "doc": "<p>Get a hash of a password.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">password</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.security.get_token_data", "modulename": "app.security", "qualname": "get_token_data", "kind": "function", "doc": "<p>Get the data from a JWT token.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests", "modulename": "app.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.tests.auth", "modulename": "app.tests.auth", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.tests.auth.test_token", "modulename": "app.tests.auth.test_token", "kind": "module", "doc": "<p>Test token endpoint.</p>\n"}, {"fullname": "app.tests.auth.test_token.test_get_token", "modulename": "app.tests.auth.test_token", "qualname": "test_get_token", "kind": "function", "doc": "<p>Test getting a token.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.authentication", "modulename": "app.tests.authentication", "kind": "module", "doc": "<p>Authentication helper functions for tests.</p>\n"}, {"fullname": "app.tests.authentication.get_token", "modulename": "app.tests.authentication", "qualname": "get_token", "kind": "function", "doc": "<p>Get a token for a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tests.authentication.get_user_token", "modulename": "app.tests.authentication", "qualname": "get_user_token", "kind": "function", "doc": "<p>This user is meant to be used in tests\nthat don't require a specific user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tests.authentication.get_user_update_token", "modulename": "app.tests.authentication", "qualname": "get_user_update_token", "kind": "function", "doc": "<p>This user is meant to be updated in test_user_update.py file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;password&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tests.authentication.get_botanist_token", "modulename": "app.tests.authentication", "qualname": "get_botanist_token", "kind": "function", "doc": "<p>This user is meant to be used in tests that require a botanist user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tests.authentication.get_user_delete_token", "modulename": "app.tests.authentication", "qualname": "get_user_delete_token", "kind": "function", "doc": "<p>This user is meant to be deleted in test_user_delete.py file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment", "modulename": "app.tests.comment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.tests.comment.test_comment_delete", "modulename": "app.tests.comment.test_comment_delete", "kind": "module", "doc": "<p>Test delete comment endpoint.</p>\n"}, {"fullname": "app.tests.comment.test_comment_delete.test_delete_comment", "modulename": "app.tests.comment.test_comment_delete", "qualname": "test_delete_comment", "kind": "function", "doc": "<p>Test deleting a comment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment.test_comment_not_authenticated", "modulename": "app.tests.comment.test_comment_not_authenticated", "kind": "module", "doc": "<p>Test using post endpoints when not authenticated.</p>\n"}, {"fullname": "app.tests.comment.test_comment_not_authenticated.test_get_post_not_authenticated", "modulename": "app.tests.comment.test_comment_not_authenticated", "qualname": "test_get_post_not_authenticated", "kind": "function", "doc": "<p>Test getting posts when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment.test_comment_not_authenticated.test_create_post_not_authenticated", "modulename": "app.tests.comment.test_comment_not_authenticated", "qualname": "test_create_post_not_authenticated", "kind": "function", "doc": "<p>Test creating a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment.test_comment_not_authenticated.test_update_post_not_authenticated", "modulename": "app.tests.comment.test_comment_not_authenticated", "qualname": "test_update_post_not_authenticated", "kind": "function", "doc": "<p>Test updating a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment.test_comment_not_authenticated.test_delete_post_not_authenticated", "modulename": "app.tests.comment.test_comment_not_authenticated", "qualname": "test_delete_post_not_authenticated", "kind": "function", "doc": "<p>Test deleting a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.comment.test_comment_update", "modulename": "app.tests.comment.test_comment_update", "kind": "module", "doc": "<p>Test update comment endpoint.</p>\n"}, {"fullname": "app.tests.comment.test_comment_update.test_update_comment", "modulename": "app.tests.comment.test_comment_update", "qualname": "test_update_comment", "kind": "function", "doc": "<p>Test updating a comment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.conftest", "modulename": "app.tests.conftest", "kind": "module", "doc": "<p>This module is used to handle database shutdown after tests.</p>\n"}, {"fullname": "app.tests.conftest.pytest_sessionfinish", "modulename": "app.tests.conftest", "qualname": "pytest_sessionfinish", "kind": "function", "doc": "<p>This funciton is used to handle database shutdown after tests.\nUsed to avoid infinite running in CI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span>, </span><span class=\"param\"><span class=\"n\">exitstatus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post", "modulename": "app.tests.post", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.tests.post.test_post_delete", "modulename": "app.tests.post.test_post_delete", "kind": "module", "doc": "<p>Test delete post.</p>\n"}, {"fullname": "app.tests.post.test_post_delete.test_delete_post", "modulename": "app.tests.post.test_post_delete", "qualname": "test_delete_post", "kind": "function", "doc": "<p>Test deleting a post.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_get", "modulename": "app.tests.post.test_post_get", "kind": "module", "doc": "<p>Test get post endpoints.</p>\n"}, {"fullname": "app.tests.post.test_post_get.test_get_post_feed", "modulename": "app.tests.post.test_post_get", "qualname": "test_get_post_feed", "kind": "function", "doc": "<p>Test getting posts from feed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_get.test_get_post_search", "modulename": "app.tests.post.test_post_get", "qualname": "test_get_post_search", "kind": "function", "doc": "<p>Test searching for posts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_get.test_get_post_own_comments", "modulename": "app.tests.post.test_post_get", "qualname": "test_get_post_own_comments", "kind": "function", "doc": "<p>Test getting user's post comments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_get.test_get_post_others_comments", "modulename": "app.tests.post.test_post_get", "qualname": "test_get_post_others_comments", "kind": "function", "doc": "<p>Test getting others' post comments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_not_authenticated", "modulename": "app.tests.post.test_post_not_authenticated", "kind": "module", "doc": "<p>Test using post endpoints when not authenticated.</p>\n"}, {"fullname": "app.tests.post.test_post_not_authenticated.test_get_post_not_authenticated", "modulename": "app.tests.post.test_post_not_authenticated", "qualname": "test_get_post_not_authenticated", "kind": "function", "doc": "<p>Test getting posts when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_not_authenticated.test_create_post_not_authenticated", "modulename": "app.tests.post.test_post_not_authenticated", "qualname": "test_create_post_not_authenticated", "kind": "function", "doc": "<p>Test creating a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_not_authenticated.test_update_post_not_authenticated", "modulename": "app.tests.post.test_post_not_authenticated", "qualname": "test_update_post_not_authenticated", "kind": "function", "doc": "<p>Test updating a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_not_authenticated.test_delete_post_not_authenticated", "modulename": "app.tests.post.test_post_not_authenticated", "qualname": "test_delete_post_not_authenticated", "kind": "function", "doc": "<p>Test deleting a post when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.post.test_post_update", "modulename": "app.tests.post.test_post_update", "kind": "module", "doc": "<p>Test update post.</p>\n"}, {"fullname": "app.tests.post.test_post_update.test_update_post", "modulename": "app.tests.post.test_post_update", "qualname": "test_update_post", "kind": "function", "doc": "<p>Test updating a post.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.test_main", "modulename": "app.tests.test_main", "kind": "module", "doc": "<p>Test the main module.</p>\n"}, {"fullname": "app.tests.test_main.get_token", "modulename": "app.tests.test_main", "qualname": "get_token", "kind": "function", "doc": "<p>Get a token for testing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.test_main.test_root_url", "modulename": "app.tests.test_main", "qualname": "test_root_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user", "modulename": "app.tests.user", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "app.tests.user.test_user_create", "modulename": "app.tests.user.test_user_create", "kind": "module", "doc": "<p>Test create user.</p>\n"}, {"fullname": "app.tests.user.test_user_create.test_create_user", "modulename": "app.tests.user.test_user_create", "qualname": "test_create_user", "kind": "function", "doc": "<p>Test creating a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_delete", "modulename": "app.tests.user.test_user_delete", "kind": "module", "doc": "<p>Test delete user.</p>\n"}, {"fullname": "app.tests.user.test_user_delete.test_delete_user", "modulename": "app.tests.user.test_user_delete", "qualname": "test_delete_user", "kind": "function", "doc": "<p>Test deleting a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_get", "modulename": "app.tests.user.test_user_get", "kind": "module", "doc": "<p>Test get user endpoints.</p>\n"}, {"fullname": "app.tests.user.test_user_get.test_get_user", "modulename": "app.tests.user.test_user_get", "qualname": "test_get_user", "kind": "function", "doc": "<p>Test getting a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_get.test_get_user_posts", "modulename": "app.tests.user.test_user_get", "qualname": "test_get_user_posts", "kind": "function", "doc": "<p>Test getting user posts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_get.test_get_user_comments", "modulename": "app.tests.user.test_user_get", "qualname": "test_get_user_comments", "kind": "function", "doc": "<p>Test getting user comments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "kind": "module", "doc": "<p>Test user endpoints when not authenticated.</p>\n"}, {"fullname": "app.tests.user.test_user_not_authenticated.test_get_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "qualname": "test_get_user_not_authenticated", "kind": "function", "doc": "<p>Test getting user data when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_not_authenticated.test_put_update_data_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "qualname": "test_put_update_data_user_not_authenticated", "kind": "function", "doc": "<p>Test updating user data when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_not_authenticated.test_put_update_password_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "qualname": "test_put_update_password_user_not_authenticated", "kind": "function", "doc": "<p>Test updating user password when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_not_authenticated.test_put_update_email_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "qualname": "test_put_update_email_user_not_authenticated", "kind": "function", "doc": "<p>Test updating user email when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_not_authenticated.test_delete_user_not_authenticated", "modulename": "app.tests.user.test_user_not_authenticated", "qualname": "test_delete_user_not_authenticated", "kind": "function", "doc": "<p>Test deleting a user when not authenticated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_update", "modulename": "app.tests.user.test_user_update", "kind": "module", "doc": "<p>Test update user data.</p>\n"}, {"fullname": "app.tests.user.test_user_update.test_update_user_data", "modulename": "app.tests.user.test_user_update", "qualname": "test_update_user_data", "kind": "function", "doc": "<p>Test updating a user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_update.test_update_user_password", "modulename": "app.tests.user.test_user_update", "qualname": "test_update_user_password", "kind": "function", "doc": "<p>Test updating a user password.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "app.tests.user.test_user_update.test_update_user_email", "modulename": "app.tests.user.test_user_update", "qualname": "test_update_user_email", "kind": "function", "doc": "<p>Test updating a user email.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();